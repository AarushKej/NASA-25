% -------------------------------------------------------------------------
% CMAC Approximation of a q function
% -------------------------------------------------------------------------
function [cmac, qvals] = cmacModel(app)

cmac= app.cmac;
% Initialize arrays with zeros
cmac.pred = 0;

% System Input (Input layer)
u = app.robot.sensor.ultrasonic.distances;

% Create vector from robot to objective
objX = app.robot.obj.x - app.robot.center(1);
objY = app.robot.obj.y - app.robot.center(2);
dist = norm(objX, objY);
u(end+1) = dist;


% calculate angle between robot's heading and obstacle
robDir = app.robot.kinematics.theta;
objDir = atan2(objY, objX);
%headingDiff = wrapToPi(objDir - robDir);
headingDiff = objDir - robDir;

% two heading inputs
% using cos and sin allows continuity as the angle moves past 180
app.robot.headingError = [cos(headingDiff), sin(headingDiff)];
u(end+1) = app.robot.headingError(1);
u(end+1) = app.robot.headingError(2);
app.robot.headingDiff = headingDiff;


% clamp input values to input range;
u = min(max(u, cmac.inputRanges(:,1)), cmac.inputRanges(:,2));


% concept mapping and actual mapping
% Mapping U --> A
% Mapping A --> P (hashing)
qvals = zeros(1,app.robot.numActions);


% 
uMin = cmac.inputRanges(:,1);
uMax = cmac.inputRanges(:,2);

normalU = (u - uMin)./(uMax-uMin);

binnedU = round(normalU .* cmac.inputBins');

offsets = repmat(1:cmac.c, cmac.numInputs,1);

s = repmat(binnedU, 1,3) + offsets;


ad = mod(s, cmac.N) + 1;


for a = 1:1:app.robot.numActions




for a = 1:1:app.robot.numActions
    % initialize memory addresses - s is conceptual and ad is actual
    s = zeros(cmac.numInputs, cmac.c);
    ad = zeros(cmac.numInputs, cmac.c);
    

    for d=1:1:cmac.numInputs
        uMin = cmac.inputRanges(d, 1);
        uMax = cmac.inputRanges(d, 2);
    
        % iteratates from 1 to the generalization width, meaning input is
        % mapped to c different nearby cells for generalization
        for i=1:1:cmac.c
            %Normalizes the input, scales it to a table of size M and rounds
            s(d,i) = round((u(d)-uMin)*cmac.inputBins(d)/(uMax-uMin))+i;    % Quantity:U-->A
            ad(d, i) = mod(s(d,i),cmac.N)+1;                        % Hash transfer:A--> P
        end
        
    end
    
    % create output vector

    unique_ad = unique(ad(:));
    for i = 1:length(unique_ad)
        qvals(a) = qvals(a) + cmac.wMatrix(a, unique_ad(i));
    end
    qvals(a) = qvals(a) / length(unique_ad);
    
    % store addresses for use in updating model
    cmac.adMatrix(a,:,:) = ad;
    cmac.sMatrix(a,:,:) = s;
end
end


