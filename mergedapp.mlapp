classdef Application < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                        matlab.ui.Figure
        GridLayout                      matlab.ui.container.GridLayout
        LeftPanel                       matlab.ui.container.Panel
        CustomizationTabs               matlab.ui.container.TabGroup
        CMACTab                         matlab.ui.container.Tab
        MomentumFactorEditField         matlab.ui.control.NumericEditField
        MomentumFactorLabel             matlab.ui.control.Label
        GeneralizationFactorEditField   matlab.ui.control.NumericEditField
        NumberOfStatesLabel_4           matlab.ui.control.Label
        ObjectiveDirectionBinsEditField  matlab.ui.control.NumericEditField
        NumberOfStatesLabel_3           matlab.ui.control.Label
        ObjectiveDistanceBinsEditField  matlab.ui.control.NumericEditField
        NumberOfStatesLabel_2           matlab.ui.control.Label
        EpisodesUntilQLabel             matlab.ui.control.Label
        DecisionMakingLabel             matlab.ui.control.Label
        TrainingParametersLabel         matlab.ui.control.Label
        DecisionMakingSwitch            matlab.ui.control.Switch
        DeltaTimeEditField              matlab.ui.control.NumericEditField
        DeltaTimeLabel                  matlab.ui.control.Label
        EpisodesUntilQEditField         matlab.ui.control.NumericEditField
        SensorBinsEditField             matlab.ui.control.NumericEditField
        NumberOfStatesLabel             matlab.ui.control.Label
        DiscountFactorEditField         matlab.ui.control.NumericEditField
        DiscountFactorLabel             matlab.ui.control.Label
        LearningRateEditField           matlab.ui.control.NumericEditField
        LearningRateLabel               matlab.ui.control.Label
        MaxStepsEditField               matlab.ui.control.NumericEditField
        MaximumStepsLabel               matlab.ui.control.Label
        MaxEpisodesEditField            matlab.ui.control.NumericEditField
        MaxEpisodesEditFieldLabel       matlab.ui.control.Label
        RoverTab                        matlab.ui.container.Tab
        Switch                          matlab.ui.control.Switch
        LiDARFieldofViewEditField       matlab.ui.control.EditField
        LiDARFieldofViewEditFieldLabel  matlab.ui.control.Label
        NumberofSensorsEditField        matlab.ui.control.EditField
        NumberofSensorsLabel            matlab.ui.control.Label
        SpawnPositionSwitchLabel_3      matlab.ui.control.Label
        CoordinatesEditField            matlab.ui.control.EditField
        AngleEditField                  matlab.ui.control.EditField
        AngleEditFieldLabel             matlab.ui.control.Label
        SpawnPositionSwitchLabel_2      matlab.ui.control.Label
        PlotButton_4                    matlab.ui.control.Button
        SpawnPositionPlot               matlab.ui.control.Button
        SensorMaxRangeEditField         matlab.ui.control.NumericEditField
        SensorMaxRangeEditFieldLabel    matlab.ui.control.Label
        SpawnPositionSwitch             matlab.ui.control.Switch
        SpawnPositionSwitchLabel        matlab.ui.control.Label
        RoverParametersLabel            matlab.ui.control.Label
        TurnPowerEditField              matlab.ui.control.NumericEditField
        TurnPowerEditFieldLabel         matlab.ui.control.Label
        PowerEditField                  matlab.ui.control.NumericEditField
        PowerEditFieldLabel             matlab.ui.control.Label
        roverLengthEditField            matlab.ui.control.NumericEditField
        LengthLabel                     matlab.ui.control.Label
        RoverWidthEditField             matlab.ui.control.NumericEditField
        WidthLabel                      matlab.ui.control.Label
        ObstaclesTab                    matlab.ui.container.Tab
        RemoveModeSwitch                matlab.ui.control.Switch
        RemoveModeSwitchLabel           matlab.ui.control.Label
        ObstacleLibraryLabel            matlab.ui.control.Label
        polygonimage_2                  matlab.ui.control.Image
        PolygonalObstacleLabel          matlab.ui.control.Label
        SquareObstacleLabel             matlab.ui.control.Label
        CircularObstacleLabel           matlab.ui.control.Label
        SideNumberLabel                 matlab.ui.control.Label
        polyradiuslabel                 matlab.ui.control.Label
        PolyRadiusEditField             matlab.ui.control.NumericEditField
        PlotButton_3                    matlab.ui.control.Button
        PlotButton_2                    matlab.ui.control.Button
        PlotButton                      matlab.ui.control.Button
        SideNumberEditField             matlab.ui.control.NumericEditField
        CircleRadiusLabel               matlab.ui.control.Label
        CircleRadiusEditField           matlab.ui.control.NumericEditField
        RectHeightLabel                 matlab.ui.control.Label
        RectHeightEditField             matlab.ui.control.NumericEditField
        circleImage                     matlab.ui.control.Image
        polygonimage                    matlab.ui.control.Image
        CenterPanel                     matlab.ui.container.Panel
        UIAxes                          matlab.ui.control.UIAxes
        RightPanel                      matlab.ui.container.Panel
        Panel_2                         matlab.ui.container.Panel
        EpisodeCountEditField           matlab.ui.control.NumericEditField
        EpisodeCountLabel               matlab.ui.control.Label
        FramesPerSecondEditField        matlab.ui.control.NumericEditField
        SimulationTimeEditField         matlab.ui.control.NumericEditField
        FPSLabel                        matlab.ui.control.Label
        SimulationTimeLabel             matlab.ui.control.Label
        LapCountEditField               matlab.ui.control.NumericEditField
        LapCountLabel                   matlab.ui.control.Label
        EpsilonGreedyGraph              matlab.ui.control.UIAxes
        ConvergenceGraph                matlab.ui.control.UIAxes
        LossGraph                       matlab.ui.control.UIAxes
        RewardsGraph                    matlab.ui.control.UIAxes
        ConfigPanel                     matlab.ui.container.Panel
        ResetConfigurationButton        matlab.ui.control.Button
        LoadTrackButton                 matlab.ui.control.Button
        SaveTrackButton                 matlab.ui.control.Button
        LoadQMatrixButton               matlab.ui.control.Button
        SaveQMatrixButton               matlab.ui.control.Button
        StopButton                      matlab.ui.control.Button
        StartButton                     matlab.ui.control.Button
    end

    % Properties that correspond to apps with auto-reflow
    properties (Access = private)
        onePanelWidth = 576;
        twoPanelWidth = 768;
    end

    properties (Access = public)
        robot; % Robot in sim and app
        plots; % used for creating polygons and calling other files
        sim; % contains important simulation parameters such as learning rate
        inputs; % used for calling Intialize and some of the other files
        dims; % dimensions, used for dimensions of polygons. 
        RadiusArray; % the variable used for setting the two possibilties for minimum radius. 
        minradius; % the variable that is equal to the greater of the two possibilities.
        stopSim; % Booleon to check if stop button is pressed 
        maxradius; %Max radius of circle obstacles are circumscribed in 
        outputs;% Field used in graphing 
        counterplot=0;
        maxrover; % Max width of the rover 
        mintrack; % Minimum width of track
        cmac;
        X;
        X1;
        Y;
        Y1;
        Rand;
    end
    
    methods (Access = public)
        function setValues(app)
            % ----------------Setting Default Values as the Values that Appear-----------------%
            % app.TrackLengthEditField.Value = app.inputs.track.wall1_length;   % sets the default track length in the edit field to display to user
            % app.TrackLengthSlider.Value = app.inputs.track.wall1_length;  % sets the default track length, to display to the user in the slider
            % app.TrackHeightEditField.Value = app.inputs.track.wall2_length;   % sets the default track width in the edit field to display to user
            % app.TrackHeightSlider.Value = app.inputs.track.wall2_length;  % sets the default track width,to display to the user in the slider
            app.RoverWidthEditField.Value = app.inputs.robot.width;   % sets the default rover width in the edit field to display to user
            app.roverLengthEditField.Value = app.inputs.robot.length;   % sets the default rover length in the edit field to display to user
            
            app.DeltaTimeEditField.Value = app.inputs.dt;
            app.MomentumFactorEditField.Value = app.inputs.cmac.beta;
            app.GeneralizationFactorEditField.Value = app.inputs.cmac.c;
            app.LearningRateEditField.Value = app.inputs.cmac.alpha;
            app.DiscountFactorEditField.Value = app.inputs.cmac.gamma;

            app.EpisodesUntilQEditField.Value = app.inputs.sim.episodesUntilQ;



            % ----------------Setting the min radius for sensors------------------%
            app.RadiusArray=[((app.roverLengthEditField.Value/2)*0.68) (app.roverLengthEditField.Value)];  % Two possibilities for minimum radius, of an object, that a robot will be able to sense depending on the robot length.
            app.minradius = max(app.RadiusArray);  % Setting and choosing the possibility that works for the robot length choosen to the variable "minradius". 
            app.maxradius=((app.inputs.track.wall2_length-(app.RoverWidthEditField.Value+(app.RoverWidthEditField.Value/3))));
            app.PolyRadiusEditField.Limits= [app.minradius app.maxradius];  % Setting the polygon's radius edit field box to unlimited values.             app.RectHeightEditField.Limits= [17 inf];  % Setting the Rectangles side length edit field box to unlimited values.
            app.CircleRadiusEditField.Limits= [app.minradius app.maxradius]; % Setting the Circle's radius edit field to unlimited values. 
            app.RectHeightEditField.Limits= [app.minradius app.maxradius];

            % ----------------Setting the min and max for robot width------------------%
            app.maxrover=app.inputs.track.wall1_length/2;
            app.RoverWidthEditField.Limits=[2 app.maxrover];
            % ----------------Setting the min and max for track width------------------%
            app.mintrack=app.RoverWidthEditField.Value*2;

        end
        function updateInputs(app)% read parameters from user inputs
            % Simultion Params Panel
            app.cmac.alpha = app.LearningRateEditField.Value;
            app.cmac.gamma = app.DiscountFactorEditField.Value;
            app.sim.maxEpisodes = app.MaxEpisodesEditField.Value;
            app.sim.episodesUntilQ = app.EpisodesUntilQEditField.Value;
            app.sim.maxSteps = app.MaxStepsEditField.Value;
            app.cmac.c=app.GeneralizationFactorEditField.Value;
            app.cmac.inputBins(1:5) = app.SensorBinsEditField.Value;
            app.cmac.inputBins(6) = app.ObjectiveDistanceBinsEditField.Value;
            app.cmac.inputBins(6:7) = app.ObjectiveDirectionBinsEditField.Value;
            app.cmac.beta = app.MomentumFactorEditField.Value;
            app.inputs.dt = app.DeltaTimeEditField.Value;

            % Robot Params Panel
            app.robot.pow = app.PowerEditField.Value;
            app.robot.turnPow = app.TurnPowerEditField.Value;
            app.cmac.rangeMax = app.SensorMaxRangeEditField.Value;
        end

        function updateRobot(app)
            app.robot.turnPow = app.TurnPowerEditField.Value;
            app.robot.pow = app.PowerEditField.Value;
            app.inputs.robot.width = app.RoverWidthEditField.Value;
            app.inputs.robot.length = app.roverLengthEditField.Value;
            cla(app.UIAxes);
            [app.robot,app.plots,app.sim]=initialize(app); 
        end
      function displayOutputs(app) % output fps, time, laps, etc.
            app.FramesPerSecondEditField.Value = round(mean(app.plots.display.fpsvec));
            app.SimulationTimeEditField.Value = app.plots.display.timeelapsed.sim;

            app.EpisodeCountEditField.Value = app.sim.episode;
            
            drawnow;
            % x=linspace(1,app.sim.maxSteps);
            % yVals(end+1) =mean(app.sim.lastTenRewards);
        end

        function runSimulation(app) % simulation top level
            app.stopSim = false;
            
            cla(app.RewardsGraph);
            cla(app.ConvergenceGraph);
            cla(app.LossGraph);
            cla(app.EpsilonGreedyGraph);

            app.sim.status = "running";
            updateInputs(app);
            app.outputs.rewardsGraph.y = zeros(1,app.sim.maxEpisodes);
            app.outputs.lossCurve.y = zeros(1, app.sim.maxEpisodes);
            app.outputs.convergenceGraph.y = zeros(1,app.sim.maxEpisodes);
            app.outputs.lossGraph.y = zeros(1,app.sim.maxEpisodes);
            app.outputs.crossValidationGraph.y = zeros(1,app.sim.maxEpisodes);
            episoderewardvector=1:1:app.sim.maxEpisodes;

            % load Qtable.mat Qtable
            epsilonVec = linspace(1,0,app.sim.episodesUntilQ);


            app.sim.totalReward = 0;
            qChange = 0;

            while ~app.stopSim
                try
                    app.robot.loop = app.robot.loop + 1;
                    %disp(app.robot.loop);
                    app.sim.episode = app.sim.episode + 1;
                    app.sim.episodeReward=0;
                    app.sim.episodeChange = 0;
                    stepCount = 0;
                    while stepCount<app.sim.maxSteps
                        stepCount = stepCount + 1;

                        [app.cmac, qPreds] = cmacModel(app);
                        %disp(qPreds);

                        % Decide on action
                        if app.DecisionMakingSwitch.Value == "Epsilon-Greedy" && app.sim.episode<app.sim.episodesUntilQ && rand < epsilonVec(app.sim.episode)
                            action = randi([1 3]);
                        else
                            [~, action] = max(qPreds);
                        end
                        % disp((qPreds));

                        app.robot.sensor.prevDistances = app.robot.sensor.ultrasonic.distances;

                        switch app.robot.actions(action)
                            case "forward"
                                app.robot=motor(app.robot,'right','power',app.robot.pow);
                                app.robot=motor(app.robot,'left','power',app.robot.pow);
                            case "left"
                                app.robot=motor(app.robot,'right','power',app.robot.turnPow);
                                app.robot=motor(app.robot,'left','power',app.robot.turnPow * 0);
                            case "right"
                                app.robot=motor(app.robot,'right','power',app.robot.turnPow * 0);
                                app.robot=motor(app.robot,'left','power',app.robot.turnPow);
                        end

                        if min(app.robot.sensor.ultrasonic.distances) > 60
                            [left, right] = goalSeeking(app);
                          
                            app.robot=motor(app.robot,'right','power', abs(right));
                            app.robot=motor(app.robot,'left','power', abs(left));
                        end
                        
                        %*********************** DO NOT CHANGE ************************%
                            [app.robot,app.plots]=executeMove(app.robot,app.plots,false);
                        if app.robot.plot.closed
                            % save Qtable.mat
                        end
                        %**************************************************************%
                        [app.robot, rewards] = evaluateReward(app.robot, app.robot.actions(action));
                        

                        % Update weights
                        try
                            % Before updating weights
                            oldWeights = app.cmac.wMatrix;
                            
                            % Update weights
                            app.cmac = updateCmac(app, action, qPreds(action), rewards);
                            
                            % After updating weights
                            newWeights = app.cmac.wMatrix;
                            
                            % Calculate and accumulate Q-value (weight) change
                            qChange = sum(abs(newWeights(:) - oldWeights(:)));
                            app.sim.episodeChange = app.sim.episodeChange + qChange;
                            
                        catch err
                            disp(getReport(err));
                            uialert(app.UIFigure, 'Error updating weights', getReport(err));
                        end
                        if app.robot.crashed || app.robot.arrived || app.stopSim
                            break
                        end
                        drawnow limitrate;
                        app.sim.episodeReward=app.sim.episodeReward+rewards;
                        app.sim.totalreward=app.sim.totalReward+rewards;
                        app.sim.episodeChange = app.sim.episodeChange + abs(qChange); 
                        displayOutputs(app);
    
                        episoderewardvector(app.sim.episode)=app.sim.episodeReward;
                        
    
                          % c2=app.MaxEpisodesEditField.Value;
                         % xlim(app.graph1,[0 20])
                         %  ylim(app.graph1,[-100,10000000000]);
                    end

                    % Reset Robot and Spawn
                    app.robot=setSpawn(app.robot,app.plots,app.robot.set.spawn.x,app.robot.set.spawn.y,app.robot.random); % randomly select new spawn
                    
                    [app.robot,app.plots]=resetRobot(app.robot,app.plots);
                    
                    % Display Graphs
                    if app.sim.episode <= numel(app.outputs.rewardsGraph.y)
                        app.outputs.rewardsGraph.y(app.sim.episode) = app.sim.episodeReward/stepCount;
                        plot(app.RewardsGraph, 1:app.sim.episode, app.outputs.rewardsGraph.y(1:app.sim.episode), 'b', 'LineWidth', 1.5);
                        if app.sim.episode > 1
                            xlim(app.RewardsGraph, [1 app.sim.episode]);
                        else
                            xlim(app.RewardsGraph, [1 2]);
                        end
                    
                        app.outputs.convergenceGraph.y(app.sim.episode) = app.sim.episodeChange/stepCount;
                        plot(app.ConvergenceGraph, 1:app.sim.episode, app.outputs.convergenceGraph.y(1:app.sim.episode), 'r', 'LineWidth', 1.5);
                        if app.sim.episode > 1
                            xlim(app.ConvergenceGraph, [1 app.sim.episode]);
                        else
                            xlim(app.ConvergenceGraph, [1 2]);
                        end
                    
                        [~, qPredsNext] = cmacModel(app); % Get Q-values for all actions at once
                        qTarget = rewards + app.cmac.gamma * max(qPredsNext);
                        loss = app.computeLoss(qPreds, qTarget);
                        app.outputs.lossGraph.y(app.sim.episode) = loss;
                        plot(app.LossGraph, 1:app.sim.episode, app.outputs.lossGraph.y(1:app.sim.episode), 'g', 'LineWidth', 1.5);
                        if app.sim.episode > 1
                            xlim(app.LossGraph, [1 app.sim.episode]);
                        else
                            xlim(app.LossGraph, [1 2]);
                        end
                    
                        epsilonVec = linspace(1,0,app.sim.episodesUntilQ); % Already in your code
                        if app.sim.episode <= length(epsilonVec)
                            epsilon = epsilonVec(app.sim.episode);
                        else
                            epsilon = 0;
                        end
                        app.outputs.EpsilonGreedyGraph.y(app.sim.episode) = epsilon;
                        plot(app.EpsilonGreedyGraph, 1:app.sim.episode, app.outputs.EpsilonGreedyGraph.y(1:app.sim.episode), 'm', 'LineWidth', 1.5);
                        if app.sim.episode > 1
                            xlim(app.EpsilonGreedyGraph, [1 app.sim.episode]);
                        else
                            xlim(app.EpsilonGreedyGraph, [1 2]);
                        end
                    end

                catch err
                    if app.stopSim
                        return;
                    else
                        uialert(app.UIFigure,'Error during simulation iteration',getReport(err));
                        disp(err);
                        disp(getReport(err));
                        break;
                    end
                end
            end
            %cla(app.UIAxes);
            %[app.robot,app.plots,app.sim]=initialize(app);  % Call Intialize and take new inputs, user inputs, and make them simulation inputs.
            displayOutputs(app)
        end

        function loss = computeLoss(~, qPreds, qTarget)
            loss = mean((qPreds - qTarget).^2);
        end
    end
    
   
    
    methods (Access = private)

        function pt = getClickInAxes(app)
            cp = app.UIAxes.CurrentPoint;     % 2x3, take the first row XY
            pt = cp(1,1:2);
        
            xl = app.UIAxes.XLim; yl = app.UIAxes.YLim;
            if pt(1) < xl(1) || pt(1) > xl(2) || pt(2) < yl(1) || pt(2) > yl(2)
                pt = [];
                return;
            end
        end


        function inside = clickInsidePolyByCentroid(app, cp, V)
        
            % Try robust centroid
            try
                [cx, cy] = centroid(polyshape(V));
                fprintf('Click: (%.2f, %.2f), Centroid: (%.2f, %.2f)\n', cp(1), cp(2), cx, cy);
                C = [cx, cy];
            catch
                C = mean(V, 1);
            end
        
            % If centroid is outside (concave/self-intersecting), fallback to inpolygon
            try
                if ~isinterior(polyshape(V), C(1), C(2))
                    inside = inpolygon(cp(1), cp(2), V(:,1), V(:,2));
                    return;
                end
            catch
                % continue with the segment test anyway
            end
        
            A = cp; B = C;
            n = size(V,1);
            for k = 1:n
                P1 = V(k,:);
                P2 = V(mod(k,n)+1,:);
                if app.segmentsIntersect(A,B,P1,P2)
                    inside = false;   % any intersection means outside
                    return;
                end
            end
        
            inside = true;            % no intersections -> inside
        end


        function tf = segmentsIntersect(app, a,b,c,d)
            o1 = app.orient2D(a,b,c);
            o2 = app.orient2D(a,b,d);
            o3 = app.orient2D(c,d,a);
            o4 = app.orient2D(c,d,b);
        
            % Proper intersection
            if o1*o2 < 0 && o3*o4 < 0
                tf = true;
                return;
            end
        
            % Colinear + on segment cases
            if o1 == 0 && app.onSeg(a,c,b), tf = true; return; end
            if o2 == 0 && app.onSeg(a,d,b), tf = true; return; end
            if o3 == 0 && app.onSeg(c,a,d), tf = true; return; end
            if o4 == 0 && app.onSeg(c,b,d), tf = true; return; end
        
            tf = false;
        end
        
        function v = orient2D(app, a,b,c) %#ok<INUSD>
            v = sign((b(1)-a(1))*(c(2)-a(2)) - (b(2)-a(2))*(c(1)-a(1)));
        end
        
        function tf = onSeg(app, a,c,b) %#ok<INUSD>
            tf = c(1) >= min(a(1),b(1)) - eps && c(1) <= max(a(1),b(1)) + eps && ...
                 c(2) >= min(a(2),b(2)) - eps && c(2) <= max(a(2),b(2)) + eps;
end
        
        function removeObstacleAtClick(app)
            cp = app.getClickInAxes();
            if isempty(cp)
                disp('Click outside axes.');
                return;
            end
            disp(['Remove click at: ', num2str(cp)]);
        
            if ~isfield(app.plots, 'obstacleArr') || isempty(app.plots.obstacleArr)
                disp('No obstacles stored.');
                return;
            end
        
            for i = numel(app.plots.obstacleArr):-1:1
                obs  = app.plots.obstacleArr{i};
                type = obs{1};
        
                switch type
                    case {'poly','rect'}
                        % vertices expected in obs{7}
                        if numel(obs) >= 7 && size(obs{7},2) == 2
                            V = obs{7};
                            if inpolygon(cp(1), cp(2), V(:,1), V(:,2))
                                % remove from data structures and redraw
                                app.plots = app.removeFromObsSets(app.plots, obs);
                                app.plots.obstacleArr(i) = [];
                                if numel(obs) >= 9 && ~isempty(obs{9})
                                    app.plots = setObs(app.plots, obs{9});   % standalone version
                                end
                                disp(['Removed ', type, ' obstacle']);
                                return;
                            end
                        end
        
                    case 'circ'
                        % center in obs{5}, radius/dims in obs{2}
                        if numel(obs) >= 5
                            center = obs{5};
                            radius = obs{2};
                            if norm(cp - center(1:2)) <= radius
                                app.plots = app.removeFromObsSets(app.plots, obs);
                                app.plots.obstacleArr(i) = [];
                                if numel(obs) >= 9 && ~isempty(obs{9})
                                    app.plots = setObs(app.plots, obs{9});   % standalone version
                                end
                                disp('Removed circle obstacle');
                                return;
                            end
                        end
                end
            end
        
            disp('No obstacle found at click location');
        end

        function plots = removeFromObsSets(~, plots, obs)
            if numel(obs) < 9 || isempty(obs{9})
                return; % no obsSet index
            end
            s = obs{9};
        
            if numel(obs) >= 8 && isa(obs{8}, 'polyshape')
                target = obs{8};
            elseif numel(obs) >= 7 && isnumeric(obs{7})
                target = polyshape(obs{7});
            else
                return;
            end
        
            if length(plots.poly.obsSets) < s || isempty(plots.poly.obsSets{s})
                return;
            end
        
            % Remove any obstacle whose centroid lies inside the clicked shape
            V = target.Vertices;
            c = mean(V, 1);
            ps = plots.poly.obsSets{s};
            keep = true(size(ps));
            for k = 1:numel(ps)
                if isinterior(ps(k), c(1), c(2))
                    keep(k) = false;
                    break;
                end
            end
            plots.poly.obsSets{s} = ps(keep);
        end
        
        function deleteIfValid(~, h)
            if ~isempty(h) && any(isgraphics(h))
                delete(h);
            end
        end
        
        function flashTemporary(app, type, varargin)
            switch type
                case 'poly'
                    vertices = varargin{1};
                    ph = plot(app.UIAxes, vertices(:,1), vertices(:,2), ...
                        'y', 'LineWidth', 2);
                case 'circ'
                    center = varargin{1};
                    radius = varargin{2};
                    theta = linspace(0, 2*pi, 100);
                    x = center(1) + radius * cos(theta);
                    y = center(2) + radius * sin(theta);
                    ph = plot(app.UIAxes, x, y, 'y', 'LineWidth', 2);
            end
            drawnow;
            pause(0.15);
            delete(ph);
        end

        function enableRemoveMode(app)
                app.UIAxes.HitTest = 'on';
                app.UIAxes.PickableParts = 'all';
                app.UIAxes.ButtonDownFcn = @(~,~)app.removeObstacleAtClick();
            
                % Make all patches and lines clickable
                all_obstacles = findall(app.UIAxes, 'Type', 'patch');
                for obs = all_obstacles'
                    obs.HitTest = 'on';
                    obs.PickableParts = 'all';
                    obs.ButtonDownFcn = @(~,~)app.removeObstacleAtClick();
                end
            
                all_circles = findall(app.UIAxes, 'Type', 'line');
                for circ = all_circles'
                    circ.HitTest = 'on';
                    circ.PickableParts = 'all';
                    circ.ButtonDownFcn = @(~,~)app.removeObstacleAtClick();
                end
            end
        
            function disableRemoveMode(app)
                app.UIAxes.ButtonDownFcn = [];
                all_obstacles = findall(app.UIAxes, 'Type', 'patch');
                for obs = all_obstacles'
                    obs.ButtonDownFcn = [];
                end
                all_circles = findall(app.UIAxes, 'Type', 'line');
                for circ = all_circles'
                    circ.ButtonDownFcn = [];
                end
            end
    end
 

    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app, Alpha)
            %app.graph1.Visible = 'off';
            %addpath('V6_Ian\SimulationCode\');
            %addpath('V6_Ian\Images\');

           %set(app.graph1,'position',[0.005,5,300,0.00001])

            % ---------------- Initialize Certain Variables ---------------------%
            app.inputs = defaultInputs(); % default inputs are app inputs, it HAS to be at top!!!!
            app.cmac = app.inputs.cmac;
            app.sim.qmatrix = [];
            app.plots.obstacleArr = {};
         app.X1 = 3;
         app.Y1 = rand;
         app.Rand = true;
            % ----------------Setting up the app-----------------%
            cla(app.UIAxes)   % clear the app axes to avoid overlaying axes. 
            cla(app.RewardsGraph);
            cla(app.ConvergenceGraph);
            cla(app.EpsilonGreedyGraph);
            cla(app.LossGraph);
            app.plots.ax = app.UIAxes;
            if ~isfield(app.plots,'poly'), app.plots.poly = struct(); end
            if ~isfield(app.plots.poly,'walls'), app.plots.poly.walls = polyshape(); end
            if ~isfield(app.plots,'trackpoly'), app.plots.trackpoly = polyshape(); end
            if ~isfield(app.plots,'ptspacing'), app.plots.ptspacing = 0.1; end


            [app.robot,app.plots,app.sim]=initialize(app);   % creates everything on main axis. 
        app.X = 0;
        app.Y = 0;
        app.Rand = true;
            axis(app.UIAxes,'Equal')
            axis(app.UIAxes,'off')
            app.UIAxes.XLimMode='manual';
            app.UIAxes.Interactions=[];

            % ----------------Positioning Components-----------------%
            pos = app.ConfigPanel.Position;
            pos(2) = 5;
            %set(app.ConfigPanel,"Position", pos);
            %movegui(app.ConfigPanel,pos);
            setValues(app);
        end

        % Value changed function: RoverWidthEditField
        function RoverWidthEditFieldValueChanged(app, event)
            app.RoverWidthEditField.Limits=[2 app.maxrover];
            app.mintrack=app.RoverWidthEditField.Value*2;
            app.TrackWidthEditField.Limits=[app.mintrack 110];
            if app.RoverWidthEditField.Value < (3*app.TrackWidthEditField.Value-(3*app.roverLengthEditField.Value))/4  
            app.RadiusArray=[((app.roverLengthEditField.Value/2)*0.68) (app.roverLengthEditField.Value)];  % Two possibilities for minimum radius, of an object, that a robot will be able to sense depending on the robot length.
            app.minradius = max(app.RadiusArray);  % Setting and choosing the possibility that works for the robot length choosen to the variable "minradius". 
            app.maxradius=((app.TrackWidthEditField.Value-(app.RoverWidthEditField.Value+(app.RoverWidthEditField.Value/3))));
            app.PolyRadiusEditField.Limits= [app.minradius app.maxradius];  % Setting the polygon's radius edit field box to unlimited values.             app.RectHeightEditField.Limits= [17 inf];  % Setting the Rectangles side length edit field box to unlimited values.
            app.CircleRadiusEditField.Limits= [app.minradius app.maxradius]; % Setting the Circle's radius edit field to unlimited values. 
            app.RectHeightEditField.Limits= [app.minradius app.maxradius];    
            else
                disp('invalid');
           end
            % app.inputs.robot.width=app.RoverWidthEditField.Value; % Set the user's edit field input of the rover width to the actual rover width in the simulation.
            % cla(app.UIAxes);  % clear the app axes to avoid overlaying axes. 
            % [app.robot,app.plots]=initializeRobot(app.robot,app.plots,app.inputs);
            updateRobot(app);
          
        end

        % Value changed function: roverLengthEditField
        function roverLengthEditFieldValueChanged(app, event)
            
            app.inputs.robot.length=app.roverLengthEditField.Value;  % Set the user's edit field input of the rover length to the actual rover length in the simulation.
           if app.roverLengthEditField > ((app.TrackWidthEditField.Value-(app.RoverWidthEditField.Value+(app.RoverWidthEditField.Value/3))))
            app.RadiusArray=[((app.roverLengthEditField.Value/2)*0.68) (app.roverLengthEditField.Value)];  % Two possibilities for minimum radius, of an object, that a robot will be able to sense depending on the robot length.
            app.minradius = max(app.RadiusArray);  % Setting and choosing the possibility that works for the robot length choosen to the variable "minradius". 
            app.maxradius=((app.TrackWidthEditField.Value-(app.RoverWidthEditField.Value+(app.RoverWidthEditField.Value/3))));
            app.PolyRadiusEditField.Limits= [app.minradius app.maxradius];  % Setting the polygon's radius edit field box to unlimited values.             app.RectHeightEditField.Limits= [17 inf];  % Setting the Rectangles side length edit field box to unlimited values.
            app.CircleRadiusEditField.Limits= [app.minradius app.maxradius]; % Setting the Circle's radius edit field to unlimited values. 
            app.RectHeightEditField.Limits= [app.minradius app.maxradius]; 
           end
            % cla(app.UIAxes);  % clear the app axes to avoid overlaying axes. 
            %   [app.robot,app.plots]=initializeRobot(app.robot,app.plots,app.inputs);
                        updateRobot(app);
        end

        % Button pushed function: StartButton
        function StartButtonPushed(app, event)
            %[app.robot,app.plots] = initialize(app); 
            runSimulation(app)
        end

        % Button pushed function: PlotButton
        function PlotButtonPushed(app, event)
            if ~isfield(app.plots, 'ax') || isempty(app.plots.ax) || ~any(isgraphics(app.plots.ax))
                app.plots.ax = app.UIAxes;
            end
        
            doPlot = true;
            app.counterplot = 0;
        
            sides = app.SideNumberEditField.Value;
        
            app.dims = (app.PolyRadiusEditField.Value * sin(pi / sides));
            poly = nsidedpoly(sides, 'SideLength', (app.PolyRadiusEditField.Value * sin(pi / sides)));
        
            % Preview patch
            p = patch(app.UIAxes, 'Faces', 1:sides, ...
                'Vertices', poly.Vertices, ...
                'FaceColor', 'none', 'FaceAlpha', 1, ...
                'EdgeColor', [140, 209, 255] / 255);
        
            app.UIFigure.WindowButtonMotionFcn = {@mousemove, app.UIAxes, p, poly};
            app.UIFigure.WindowButtonDownFcn   = {@mouseclick, sides};
        
            function mousemove(~, ~, ax, p, poly)
                try
                    p.Vertices = poly.Vertices + ax.CurrentPoint(1, 1:2);
                    doPlot = true;
                catch
                    doPlot = false;
                end
            end
        
            function mouseclick(~, ~, sidesLocal)
                % If remove mode is ON, let remover handle it and keep preview alive
                if strcmp(app.RemoveModeSwitch.Value, 'On')
                    app.removeObstacleAtClick();
                    return;
                end
        
                app.counterplot = app.counterplot + 1;
        
                if doPlot && app.counterplot < 2
                    cp = app.UIAxes.CurrentPoint(1, 1:2);
                    dims   = [sidesLocal, app.PolyRadiusEditField.Value];
                    offset = [cp(1), cp(2), 0];
        
                    app.plots = createObs(app.robot, app.plots, 1, 'poly', dims, 1, 3, offset);
                    app.plots = setObs(app.plots, 1);  % standalone version
                end
        
                if isgraphics(p); delete(p); end
                app.UIFigure.WindowButtonMotionFcn = [];
                app.UIFigure.WindowButtonDownFcn   = [];
        
                % Re-arm remove mode if currently ON
                if strcmp(app.RemoveModeSwitch.Value, 'On')
                    app.enableRemoveMode();
                end
            end
        end

        % Button pushed function: PlotButton_3
        function PlotButton_3Pushed(app, event)
            if ~isfield(app.plots, 'ax') || isempty(app.plots.ax) || ~any(isgraphics(app.plots.ax))
                app.plots.ax = app.UIAxes;
            end
        
            doPlot = true;
            app.counterplot = 0;
        
            sides = 10000;
            r = app.CircleRadiusEditField.Value;
        
            poly = nsidedpoly(sides, 'SideLength', r * sin(pi / sides));
        
            p = patch(app.UIAxes, 'Faces', 1:sides, ...
                'Vertices', poly.Vertices, ...
                'FaceColor', 'none', 'FaceAlpha', 1, ...
                'EdgeColor', [174 252 157] / 255);
        
            app.UIFigure.WindowButtonMotionFcn = {@mousemove, app.UIAxes, p, poly};
            app.UIFigure.WindowButtonDownFcn   = {@mouseclick, app.UIAxes, p, sides};
        
            app.dims = r;
        
            function mousemove(~, ~, ax, p, poly)
                try
                    p.Vertices = poly.Vertices + ax.CurrentPoint(1, 1:2);
                    doPlot = true;
                catch
                    doPlot = false;
                end
            end
        
            function mouseclick(~, ~, ax, p, sidesLocal)
                if strcmp(app.RemoveModeSwitch.Value, 'On')
                    app.removeObstacleAtClick();
                    return;
                end
        
                app.counterplot = app.counterplot + 1;
        
                if doPlot && app.counterplot < 2
                    cp = app.UIAxes.CurrentPoint(1, 1:2);
                    app.plots = createObs(app.robot, app.plots, 1, 'circ', app.dims, 1, 3, [cp(1) cp(2)]);
                    app.plots = setObs(app.plots, 1);  % standalone version
                end
        
                if isgraphics(p); delete(p); end
                app.UIFigure.WindowButtonMotionFcn = [];
                app.UIFigure.WindowButtonDownFcn   = [];
        
                if strcmp(app.RemoveModeSwitch.Value, 'On')
                    app.enableRemoveMode();
                end
            end
        end

        % Button pushed function: PlotButton_2
        function PlotButton_2Pushed(app, event)
            if ~isfield(app.plots, 'ax') || isempty(app.plots.ax) || ~any(isgraphics(app.plots.ax))
                app.plots.ax = app.UIAxes;
            end
        
            doPlot = true;
            app.counterplot = 0;
        
            sides = 4;
            rectH = app.RectHeightEditField.Value;
        
            poly = nsidedpoly(4, 'SideLength', rectH * sin(pi / sides));
        
            p = patch(app.UIAxes, 'Faces', 1:sides, ...
                'Vertices', poly.Vertices, ...
                'FaceColor', 'none', 'FaceAlpha', 1, ...
                'EdgeColor', [231 173 247] / 255);
        
            app.UIFigure.WindowButtonMotionFcn = {@mousemove, app.UIAxes, p, poly};
            app.UIFigure.WindowButtonDownFcn   = {@mouseclick, sides};
        
            app.dims = rectH * sin(pi / sides);
        
            function mousemove(~, ~, ax, p, poly)
                try
                    p.Vertices = poly.Vertices + ax.CurrentPoint(1, 1:2);
                    doPlot = true;
                catch
                    doPlot = false;
                end
            end
        
            function mouseclick(~, ~, sidesLocal)
                if strcmp(app.RemoveModeSwitch.Value, 'On')
                    app.removeObstacleAtClick();
                    return;
                end
        
                app.counterplot = app.counterplot + 1;
        
                if doPlot && app.counterplot < 2
                    cp = app.UIAxes.CurrentPoint(1, 1:2);
                    dims   = [app.dims app.dims];
                    offset = [cp(1), cp(2), 0];
        
                    app.plots = createObs(app.robot, app.plots, 1, 'rect', dims, 1, 3, offset);
                    app.plots = setObs(app.plots, 1);  % standalone version
                end
        
                if isgraphics(p); delete(p); end
                app.UIFigure.WindowButtonMotionFcn = [];
                app.UIFigure.WindowButtonDownFcn   = [];
        
                if strcmp(app.RemoveModeSwitch.Value, 'On')
                    app.enableRemoveMode();
                end
            end
        end

        % Button pushed function: StopButton
        function StopButtonPushed(app, event)
            app.stopSim=true;
        end

        % Value changed function: SensorBinsEditField
        function SensorBinsEditFieldValueChanged(app, event)
            app.robot.numStates = app.SensorBinsEditField.Value;
            n = app.robot.numStates^app.robot.numSensors;
            states = 1:app.robot.numStates;
            combos = table2array(combinations(states,states,states,states,states));
            app.robot.statesDict = dictionary;
            for i = 1:n
                app.robot.statesDict({[combos(i, :)]}) = i;
            end
        end

        % Callback function
        function ImageClicked(app, event)
             cla(app.UIAxes)  % clear the app axes to avoid overlaying axes. 
             [app.robot,app.plots,app.sim]=initialize(app);  % Call Intialize and take new inputs, user inputs, and make them simulation inputs.
        end

        % Value changed function: PolyRadiusEditField
        function PolyRadiusEditFieldValueChanged(app, event)
         if app.plots.trackWidth < (app.roverLengthEditField.Value+(app.RoverWidthEditField.Value-(app.RoverWidthEditField.Value/3)))  
          app.RadiusArray=[((app.roverLengthEditField.Value/2)*0.68) (app.roverLengthEditField.Value)];  % Two possibilities for minimum radius, of an object, that a robot will be able to sense depending on the robot length.
            app.minradius = max(app.RadiusArray);  % Setting and choosing the possibility that works for the robot length choosen to the variable "minradius". 
            app.maxradius=((app.plots.trackWidth-(app.RoverWidthEditField.Value+(app.RoverWidthEditField.Value/3))));
            app.PolyRadiusEditField.Limits= [app.minradius app.maxradius];  % Setting the polygon's radius edit field box to unlimited values.             app.RectHeightEditField.Limits= [17 inf];  % Setting the Rectangles side length edit field box to unlimited values.
            app.CircleRadiusEditField.Limits= [app.minradius app.maxradius]; % Setting the Circle's radius edit field to unlimited values. 
            app.RectHeightEditField.Limits= [app.minradius app.maxradius];
         end 
        end

        % Value changed function: RectHeightEditField
        function RectHeightEditFieldValueChanged(app, event)
           if app.plots.trackWidth < (app.roverLengthEditField.Value+(app.RoverWidthEditField.Value-(app.RoverWidthEditField.Value/3)))  
            app.RadiusArray=[((app.roverLengthEditField.Value/2)*0.68) (app.roverLengthEditField.Value)];  % Two possibilities for minimum radius, of an object, that a robot will be able to sense depending on the robot length.
            app.minradius = max(app.RadiusArray);  % Setting and choosing the possibility that works for the robot length choosen to the variable "minradius". 
            app.maxradius=((app.plots.trackWidth-(app.RoverWidthEditField.Value+(app.RoverWidthEditField.Value))));
            app.PolyRadiusEditField.Limits= [app.minradius app.maxradius];  % Setting the polygon's radius edit field box to unlimited values.             app.RectHeightEditField.Limits= [17 inf];  % Setting the Rectangles side length edit field box to unlimited values.
            app.CircleRadiusEditField.Limits= [app.minradius app.maxradius]; % Setting the Circle's radius edit field to unlimited values. 
            app.RectHeightEditField.Limits= [app.minradius app.maxradius];
           end 
        end

        % Value changed function: CircleRadiusEditField
        function CircleRadiusEditFieldValueChanged(app, event)
          if app.plots.trackWidth < (app.roverLengthEditField.Value+(app.RoverWidthEditField.Value-(app.RoverWidthEditField.Value/3)))  
            app.RadiusArray=[((app.roverLengthEditField.Value/2)*0.68) (app.roverLengthEditField.Value)];  % Two possibilities for minimum radius, of an object, that a robot will be able to sense depending on the robot length.
            app.minradius = max(app.RadiusArray);  % Setting and choosing the possibility that works for the robot length choosen to the variable "minradius". 
            app.maxradius=((app.plots.trackWidth-(app.RoverWidthEditField.Value+(app.RoverWidthEditField.Value))));
            app.PolyRadiusEditField.Limits= [app.minradius app.maxradius];  % Setting the polygon's radius edit field box to unlimited values.             app.RectHeightEditField.Limits= [17 inf];  % Setting the Rectangles side length edit field box to unlimited values.
            app.CircleRadiusEditField.Limits= [app.minradius app.maxradius]; % Setting the Circle's radius edit field to unlimited values. 
            app.RectHeightEditField.Limits= [app.minradius app.maxradius];
           end
        end

        % Button pushed function: SaveQMatrixButton
        function downloadQMatrix(app, event)
            qmatrix = app.sim.qmatrix;
            uisave('qmatrix','q_matrix.mat');
        end

        % Button pushed function: LoadQMatrixButton
        function uploadQMatrix(app, event)
            try
                [filename, filepath] = uigetfile("*.mat");
                app.sim.qmatrix = load(fullfile(filepath, filename), 'qmatrix');
                
            catch err
                uialert(app.UIFigure,'Error uploading q-matrix; please check file and try again.','Upload Error');
                disp(err);
            end
        end

        % Button pushed function: LoadTrackButton
        function uploadTrackConfig(app, event)
            %try
                [filename, filepath] = uigetfile("*.mat");
                load(fullfile(filepath, filename),'-mat', 'width','height','length','innerRadius','obstacles');
                [~,n] = size(obstacles);
                app.TrackHeightEditField.Value = height;
                app.TrackLengthEditField.Value = length;
                app.plots.obstacleArr = obstacles;
                
                updateTrack(app);
                % draw obstacles
                for i = 1:n
                    obs = app.plots.obstacleArr{i};
                    app.plots = createObs(app.robot,app.plots,1,obs{1},obs{2},obs{3},obs{4},obs{5});
                    app.plots=setObs(app.plots,1);
                end

            
            % catch err
            %     uialert(app.UIFigure,'Error uploading track configuration; please check file and try again.','Upload Error');
            %     disp(err);
            % end
        end

        % Button pushed function: SaveTrackButton
        function downloadTrackConfig(app, event)
            height = app.TrackHeightEditField.Value;
            length = app.TrackLengthEditField.Value;
            obstacles = app.plots.obstacleArr;
            uisave({'width','height','length','innerRadius','obstacles'},'trackConfig.mat');
        end

        % Button pushed function: ResetConfigurationButton
        function reset(app, event)
            clearvars app.plots app.sim app.robot app.inputs;
            app.stopSim = true;
            startupFcn(app);
            % cla(app.UIAxes);
            % app.plots.obstacleArr = {};
            % app.inputs = defaultInputs();
            % [app.robot,app.plots,app.sim] = initialize(app);
        end

        % Close request function: UIFigure
        function CloseWindow(app, event)
            app.delete;
        end

        % Value changed function: DecisionMakingSwitch
        function DecisionMakingChanged(app, event)
            value = app.DecisionMakingSwitch.Value;
            switch value
                case "Epsilon-Greedy"
                    app.EpisodesUntilQEditField.Visible = "on";
                    app.EpisodesUntilQLabel.Visible = "on";
                case "Value-Based"
                    app.EpisodesUntilQEditField.Visible = "off";
                    app.EpisodesUntilQLabel.Visible = "off";
            end
        end

        % Value changed function: SpawnPositionSwitch
        function SpawnPositionChanged(app, event)
            value = app.SpawnPositionSwitch.Value;
            switch value
                case "Custom"
                    app.SpawnPositionPlot.Visible = "on";
                    app.CoordinatesEditField.Visible = "on";
                    app.AngleEditField.Visible = "on";
                    app.AngleEditFieldLabel.Visible = "on";
                case "Randomized"
                    app.SpawnPositionPlot.Visible = "off";
                    app.CoordinatesEditField.Visible ="off";
                    app.AngleEditField.Visible = "off";
                    app.AngleEditFieldLabel.Visible = "off";
            end
        end

        % Button pushed function: SpawnPositionPlot
        function SpawnPositionPlotButtonPushed(app, event)
             app.stopSim = true;
           % app.robot=setSpawn(app.robot,app.plots,app.X,app.Y,app.Rand); % randomly select new spawn
           % [app.robot,app.plots]=resetRobot(app.robot,app.plots);


            app.robot.loop = app.robot.loop + 1;

            disp(app.robot.loop);


            app.counterplot=0;
            plot = true;
            sides= 4;

            
           % ella's version
            app.dims=(app.PolyRadiusEditField.Value*sin((pi)/(sides)));
            poly=nsidedpoly(sides,'SideLength', (17*sin((pi)/(sides))));

            
            p=patch(app.UIAxes,'Faces', 1:sides,'Vertices',poly.Vertices,'FaceColor','none','FaceAlpha',1,'EdgeColor',[140, 209, 255]/255);
            app.UIFigure.WindowButtonMotionFcn={@mousemove,app.UIAxes,p,poly};
            app.UIFigure.WindowButtonDownFcn={@mouseclick,sides};
                        
           
            function mousemove(~,~,ax,p,poly)
               try
                p.Vertices=poly.Vertices+ax.CurrentPoint(1,1:2);
                if app.counterplot < 1
                    app.CoordinatesEditField.Value = app.UIAxes.CurrentPoint(1,1) + ", " + app.UIAxes.CurrentPoint(1,2);
                end
                plot = true;
               catch
                 plot = false;
               end 
  
            end

            function mouseclick(~,~,sides)
                app.counterplot=app.counterplot+1;
                if plot
                if app.counterplot<2
                        app.robot.random = false;
                        app.robot=setSpawn(app.robot,app.plots,app.UIAxes.CurrentPoint(1,1), app.UIAxes.CurrentPoint(1,2), false); % not randomly select new spawn
                        p.Visible='off';
                        app.robot.set.spawn.x = app.UIAxes.CurrentPoint(1,1);
                        app.robot.set.spawn.y = app.UIAxes.CurrentPoint(1,2);
                        [app.robot,app.plots]=resetRobot(app.robot,app.plots);
                else
                   p.Visible='off';
                end
                end 
            end
        end

        % Button pushed function: PlotButton_4
        function PlotButton_4Pushed(app, event)
             app.stopSim = true;
           % app.robot=setSpawn(app.robot,app.plots,app.X,app.Y,app.Rand); % randomly select new spawn
           % [app.robot,app.plots]=resetRobot(app.robot,app.plots);






            app.counterplot=0;
            plot = true;
            sides= 10000;

            
           % ella's version
            app.dims=(app.PolyRadiusEditField.Value*sin((pi)/(sides)));
            poly=nsidedpoly(sides,'SideLength', (36*sin((pi)/(sides))));

            
            p=patch(app.UIAxes,'Faces', 1:sides,'Vertices',poly.Vertices,'FaceColor','none','FaceAlpha',1,'EdgeColor',[140, 209, 255]/255);
            app.UIFigure.WindowButtonMotionFcn={@mousemove,app.UIAxes,p,poly};
            app.UIFigure.WindowButtonDownFcn={@mouseclick,sides};
                        
           
            function mousemove(~,~,ax,p,poly) 
               try
                p.Vertices=poly.Vertices+ax.CurrentPoint(1,1:2);
                plot = true;
               catch
                 plot = false;
               end 
  
            end

            function mouseclick(~,~,sides)
                app.counterplot=app.counterplot+1;
                if plot
                if app.counterplot<2
                   app.X = app.UIAxes.CurrentPoint(1,1);
                   app.Y = app.UIAxes.CurrentPoint(1,2);
                   app.Rand = false;
                   [app.robot,app.plots,app.sim]=initializeObjective(app); 
                   

                        p.Visible='off';
                else
                   p.Visible='off';
                end
                end 
            end
        end

        % Value changed function: AngleEditField
        function AngleEditFieldValueChanged(app, event)
            app.stopSim = true;
            app.robot.angie = app.AngleEditField.Value;
           [app.robot,app.plots]=resetRobot(app.robot,app.plots);
        end

        % Value changed function: CoordinatesEditField
        function CoordinatesEditFieldValueChanged(app, event)
            app.stopSim = true;
            value = app.CoordinatesEditField.Value;
            string(value);
            value = extractBetween(value,2, strlength(value)-1);
            xyvalues = split(value, ", ");
            disp(value);
            app.robot=setSpawn(app.robot, app.plots, str2double(xyvalues(1)), str2double(xyvalues(2)), false);
            app.robot.set.spawn.x = str2double(xyvalues(1));
            app.robot.set.spawn.y = str2double(xyvalues(2));
            app.robot.random = false;
            [app.robot,app.plots]=resetRobot(app.robot,app.plots);
           
        end

        % Value changed function: RemoveModeSwitch
        function removemodeswitchstatus(app, event)
            if strcmp(app.RemoveModeSwitch.Value, 'On')
                app.UIFigure.WindowButtonDownFcn = @(~,~)app.removeObstacleAtClick();
            else
                app.UIFigure.WindowButtonDownFcn = [];
            end
        end

        % Value changed function: LiDARFieldofViewEditField
        function LiDARFieldofViewEditFieldValueChanged(app, event)
           app.stopSim = true;
            value = app.LiDARFieldofViewEditField.Value;
           value = str2double(value);
           app.robot.sensor.lidar.startAngle = deg2rad(90-(value/2));
           app.robot.sensor.lidar.endAngle = deg2rad(90+(value/2));
           [app.robot,app.plots]=lidarPlotting(app.robot,app.plots);
        end

        % Value changed function: Switch
        function SwitchValueChanged(app, event)
            app.stopSim = true;
            value = app.Switch.Value;
        switch value 
            case "Lines"
                app.robot.sensor.lidar.enabled = "on";
                app.robot.sensor.lidar.visible = "off";
            case "Points"
                app.robot.sensor.lidar.enabled = "off";
                app.robot.sensor.lidar.visible = "on";
        end
           [app.robot,app.plots]=lidarPlotting(app.robot,app.plots);
        end

        % Changes arrangement of the app based on UIFigure width
        function updateAppLayout(app, event)
            currentFigureWidth = app.UIFigure.Position(3);
            if(currentFigureWidth <= app.onePanelWidth)
                % Change to a 3x1 grid
                app.GridLayout.RowHeight = {630, 630, 630};
                app.GridLayout.ColumnWidth = {'1x'};
                app.CenterPanel.Layout.Row = 1;
                app.CenterPanel.Layout.Column = 1;
                app.LeftPanel.Layout.Row = 2;
                app.LeftPanel.Layout.Column = 1;
                app.RightPanel.Layout.Row = 3;
                app.RightPanel.Layout.Column = 1;
            elseif (currentFigureWidth > app.onePanelWidth && currentFigureWidth <= app.twoPanelWidth)
                % Change to a 2x2 grid
                app.GridLayout.RowHeight = {630, 630};
                app.GridLayout.ColumnWidth = {'1x', '1x'};
                app.CenterPanel.Layout.Row = 1;
                app.CenterPanel.Layout.Column = [1,2];
                app.LeftPanel.Layout.Row = 2;
                app.LeftPanel.Layout.Column = 1;
                app.RightPanel.Layout.Row = 2;
                app.RightPanel.Layout.Column = 2;
            else
                % Change to a 1x3 grid
                app.GridLayout.RowHeight = {'1x'};
                app.GridLayout.ColumnWidth = {232, '1x', 278};
                app.LeftPanel.Layout.Row = 1;
                app.LeftPanel.Layout.Column = 1;
                app.CenterPanel.Layout.Row = 1;
                app.CenterPanel.Layout.Column = 2;
                app.RightPanel.Layout.Row = 1;
                app.RightPanel.Layout.Column = 3;
            end
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Get the file path for locating images
            pathToMLAPP = fileparts(mfilename('fullpath'));

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.AutoResizeChildren = 'off';
            app.UIFigure.Color = [0.96078431372549 0.96078431372549 0.96078431372549];
            app.UIFigure.Position = [93 93 1035 630];
            app.UIFigure.Name = 'MATLAB App';
            app.UIFigure.CloseRequestFcn = createCallbackFcn(app, @CloseWindow, true);
            app.UIFigure.SizeChangedFcn = createCallbackFcn(app, @updateAppLayout, true);

            % Create GridLayout
            app.GridLayout = uigridlayout(app.UIFigure);
            app.GridLayout.ColumnWidth = {232, '1x', 278};
            app.GridLayout.RowHeight = {'1x'};
            app.GridLayout.ColumnSpacing = 0;
            app.GridLayout.RowSpacing = 0;
            app.GridLayout.Padding = [0 0 0 0];
            app.GridLayout.Scrollable = 'on';
            app.GridLayout.BackgroundColor = [0.96078431372549 0.96078431372549 0.96078431372549];

            % Create LeftPanel
            app.LeftPanel = uipanel(app.GridLayout);
            app.LeftPanel.ForegroundColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.LeftPanel.TitlePosition = 'centertop';
            app.LeftPanel.Title = 'Customization';
            app.LeftPanel.BackgroundColor = [0.9412 0.9412 0.9412];
            app.LeftPanel.Layout.Row = 1;
            app.LeftPanel.Layout.Column = 1;
            app.LeftPanel.FontName = 'Cambria Math';
            app.LeftPanel.FontWeight = 'bold';
            app.LeftPanel.FontSize = 18;

            % Create CustomizationTabs
            app.CustomizationTabs = uitabgroup(app.LeftPanel);
            app.CustomizationTabs.Position = [6 12 221 586];

            % Create CMACTab
            app.CMACTab = uitab(app.CustomizationTabs);
            app.CMACTab.Title = 'CMAC';
            app.CMACTab.BackgroundColor = [0.9412 0.9412 0.9412];
            app.CMACTab.ForegroundColor = [0.129411764705882 0.129411764705882 0.129411764705882];

            % Create MaxEpisodesEditFieldLabel
            app.MaxEpisodesEditFieldLabel = uilabel(app.CMACTab);
            app.MaxEpisodesEditFieldLabel.FontName = 'Cambria Math';
            app.MaxEpisodesEditFieldLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.MaxEpisodesEditFieldLabel.Position = [8 256 109 22];
            app.MaxEpisodesEditFieldLabel.Text = 'Maximum Episodes:';

            % Create MaxEpisodesEditField
            app.MaxEpisodesEditField = uieditfield(app.CMACTab, 'numeric');
            app.MaxEpisodesEditField.FontName = 'Cambria Math';
            app.MaxEpisodesEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.MaxEpisodesEditField.Position = [120 256 94 22];
            app.MaxEpisodesEditField.Value = 5000;

            % Create MaximumStepsLabel
            app.MaximumStepsLabel = uilabel(app.CMACTab);
            app.MaximumStepsLabel.FontName = 'Cambria Math';
            app.MaximumStepsLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.MaximumStepsLabel.Position = [8 227 101 22];
            app.MaximumStepsLabel.Text = 'Maximum Steps:';

            % Create MaxStepsEditField
            app.MaxStepsEditField = uieditfield(app.CMACTab, 'numeric');
            app.MaxStepsEditField.FontName = 'Cambria Math';
            app.MaxStepsEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.MaxStepsEditField.Position = [99 226 115 22];
            app.MaxStepsEditField.Value = 1000;

            % Create LearningRateLabel
            app.LearningRateLabel = uilabel(app.CMACTab);
            app.LearningRateLabel.FontName = 'Cambria Math';
            app.LearningRateLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.LearningRateLabel.Position = [9 505 77 22];
            app.LearningRateLabel.Text = 'Learning Rate:';

            % Create LearningRateEditField
            app.LearningRateEditField = uieditfield(app.CMACTab, 'numeric');
            app.LearningRateEditField.Limits = [0 1];
            app.LearningRateEditField.FontName = 'Cambria Math';
            app.LearningRateEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.LearningRateEditField.Position = [92 505 122 22];
            app.LearningRateEditField.Value = 0.1;

            % Create DiscountFactorLabel
            app.DiscountFactorLabel = uilabel(app.CMACTab);
            app.DiscountFactorLabel.FontName = 'Cambria Math';
            app.DiscountFactorLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.DiscountFactorLabel.Position = [9 473 88 22];
            app.DiscountFactorLabel.Text = 'Discount Factor:';

            % Create DiscountFactorEditField
            app.DiscountFactorEditField = uieditfield(app.CMACTab, 'numeric');
            app.DiscountFactorEditField.Limits = [0 1];
            app.DiscountFactorEditField.FontName = 'Cambria Math';
            app.DiscountFactorEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.DiscountFactorEditField.Position = [104 473 110 22];
            app.DiscountFactorEditField.Value = 0.9;

            % Create NumberOfStatesLabel
            app.NumberOfStatesLabel = uilabel(app.CMACTab);
            app.NumberOfStatesLabel.FontName = 'Cambria Math';
            app.NumberOfStatesLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.NumberOfStatesLabel.Position = [9 417 99 22];
            app.NumberOfStatesLabel.Text = 'Sensor Bins:';

            % Create SensorBinsEditField
            app.SensorBinsEditField = uieditfield(app.CMACTab, 'numeric');
            app.SensorBinsEditField.Limits = [0 100];
            app.SensorBinsEditField.RoundFractionalValues = 'on';
            app.SensorBinsEditField.ValueChangedFcn = createCallbackFcn(app, @SensorBinsEditFieldValueChanged, true);
            app.SensorBinsEditField.FontName = 'Cambria Math';
            app.SensorBinsEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SensorBinsEditField.Position = [81 417 133 22];
            app.SensorBinsEditField.Value = 10;

            % Create EpisodesUntilQEditField
            app.EpisodesUntilQEditField = uieditfield(app.CMACTab, 'numeric');
            app.EpisodesUntilQEditField.Limits = [0 Inf];
            app.EpisodesUntilQEditField.FontName = 'Cambria Math';
            app.EpisodesUntilQEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.EpisodesUntilQEditField.Position = [135 127 74 22];
            app.EpisodesUntilQEditField.Value = 100;

            % Create DeltaTimeLabel
            app.DeltaTimeLabel = uilabel(app.CMACTab);
            app.DeltaTimeLabel.FontName = 'Cambria Math';
            app.DeltaTimeLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.DeltaTimeLabel.Position = [8 286 100 22];
            app.DeltaTimeLabel.Text = 'Delta Time:';

            % Create DeltaTimeEditField
            app.DeltaTimeEditField = uieditfield(app.CMACTab, 'numeric');
            app.DeltaTimeEditField.FontName = 'Cambria Math';
            app.DeltaTimeEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.DeltaTimeEditField.Position = [73 287 142 22];
            app.DeltaTimeEditField.Value = 0.1;

            % Create DecisionMakingSwitch
            app.DecisionMakingSwitch = uiswitch(app.CMACTab, 'slider');
            app.DecisionMakingSwitch.Items = {'Epsilon-Greedy', 'Value-Based'};
            app.DecisionMakingSwitch.ValueChangedFcn = createCallbackFcn(app, @DecisionMakingChanged, true);
            app.DecisionMakingSwitch.FontName = 'cambria math';
            app.DecisionMakingSwitch.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.DecisionMakingSwitch.Position = [98 163 36 16];
            app.DecisionMakingSwitch.Value = 'Epsilon-Greedy';

            % Create TrainingParametersLabel
            app.TrainingParametersLabel = uilabel(app.CMACTab);
            app.TrainingParametersLabel.HorizontalAlignment = 'center';
            app.TrainingParametersLabel.FontName = 'Cambria Math';
            app.TrainingParametersLabel.FontSize = 18;
            app.TrainingParametersLabel.FontWeight = 'bold';
            app.TrainingParametersLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.TrainingParametersLabel.Position = [0 532 219 23];
            app.TrainingParametersLabel.Text = 'Training Parameters';

            % Create DecisionMakingLabel
            app.DecisionMakingLabel = uilabel(app.CMACTab);
            app.DecisionMakingLabel.HorizontalAlignment = 'center';
            app.DecisionMakingLabel.FontWeight = 'bold';
            app.DecisionMakingLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.DecisionMakingLabel.Position = [17 185 180 22];
            app.DecisionMakingLabel.Text = 'Decision-Making';

            % Create EpisodesUntilQLabel
            app.EpisodesUntilQLabel = uilabel(app.CMACTab);
            app.EpisodesUntilQLabel.WordWrap = 'on';
            app.EpisodesUntilQLabel.FontName = 'Cambria Math';
            app.EpisodesUntilQLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.EpisodesUntilQLabel.Position = [10 113 119 44];
            app.EpisodesUntilQLabel.Text = 'Episodes Until Fully Value-Based Decisions';

            % Create NumberOfStatesLabel_2
            app.NumberOfStatesLabel_2 = uilabel(app.CMACTab);
            app.NumberOfStatesLabel_2.FontName = 'Cambria Math';
            app.NumberOfStatesLabel_2.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.NumberOfStatesLabel_2.Position = [8 386 131 22];
            app.NumberOfStatesLabel_2.Text = 'Objective Distance Bins: ';

            % Create ObjectiveDistanceBinsEditField
            app.ObjectiveDistanceBinsEditField = uieditfield(app.CMACTab, 'numeric');
            app.ObjectiveDistanceBinsEditField.Limits = [0 100];
            app.ObjectiveDistanceBinsEditField.RoundFractionalValues = 'on';
            app.ObjectiveDistanceBinsEditField.FontName = 'Cambria Math';
            app.ObjectiveDistanceBinsEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.ObjectiveDistanceBinsEditField.Position = [139 386 74 22];
            app.ObjectiveDistanceBinsEditField.Value = 10;

            % Create NumberOfStatesLabel_3
            app.NumberOfStatesLabel_3 = uilabel(app.CMACTab);
            app.NumberOfStatesLabel_3.FontName = 'Cambria Math';
            app.NumberOfStatesLabel_3.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.NumberOfStatesLabel_3.Position = [8 352 133 22];
            app.NumberOfStatesLabel_3.Text = 'Objective Direction Bins: ';

            % Create ObjectiveDirectionBinsEditField
            app.ObjectiveDirectionBinsEditField = uieditfield(app.CMACTab, 'numeric');
            app.ObjectiveDirectionBinsEditField.Limits = [0 100];
            app.ObjectiveDirectionBinsEditField.RoundFractionalValues = 'on';
            app.ObjectiveDirectionBinsEditField.FontName = 'Cambria Math';
            app.ObjectiveDirectionBinsEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.ObjectiveDirectionBinsEditField.Position = [140 352 73 22];
            app.ObjectiveDirectionBinsEditField.Value = 18;

            % Create NumberOfStatesLabel_4
            app.NumberOfStatesLabel_4 = uilabel(app.CMACTab);
            app.NumberOfStatesLabel_4.FontName = 'Cambria Math';
            app.NumberOfStatesLabel_4.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.NumberOfStatesLabel_4.Position = [9 319 116 22];
            app.NumberOfStatesLabel_4.Text = 'Generalization Factor:';

            % Create GeneralizationFactorEditField
            app.GeneralizationFactorEditField = uieditfield(app.CMACTab, 'numeric');
            app.GeneralizationFactorEditField.Limits = [0 100];
            app.GeneralizationFactorEditField.RoundFractionalValues = 'on';
            app.GeneralizationFactorEditField.FontName = 'Cambria Math';
            app.GeneralizationFactorEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.GeneralizationFactorEditField.Position = [128 319 86 22];
            app.GeneralizationFactorEditField.Value = 3;

            % Create MomentumFactorLabel
            app.MomentumFactorLabel = uilabel(app.CMACTab);
            app.MomentumFactorLabel.FontName = 'Cambria Math';
            app.MomentumFactorLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.MomentumFactorLabel.Position = [10 446 102 22];
            app.MomentumFactorLabel.Text = 'Momentum Factor:';

            % Create MomentumFactorEditField
            app.MomentumFactorEditField = uieditfield(app.CMACTab, 'numeric');
            app.MomentumFactorEditField.Limits = [0 1];
            app.MomentumFactorEditField.FontName = 'Cambria Math';
            app.MomentumFactorEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.MomentumFactorEditField.Position = [110 446 105 22];
            app.MomentumFactorEditField.Value = 0.05;

            % Create RoverTab
            app.RoverTab = uitab(app.CustomizationTabs);
            app.RoverTab.Title = 'Rover';
            app.RoverTab.BackgroundColor = [0.9412 0.9412 0.9412];
            app.RoverTab.ForegroundColor = [0.129411764705882 0.129411764705882 0.129411764705882];

            % Create WidthLabel
            app.WidthLabel = uilabel(app.RoverTab);
            app.WidthLabel.FontName = 'Cambria Math';
            app.WidthLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.WidthLabel.Position = [10 508 39 22];
            app.WidthLabel.Text = 'Width:';

            % Create RoverWidthEditField
            app.RoverWidthEditField = uieditfield(app.RoverTab, 'numeric');
            app.RoverWidthEditField.ValueChangedFcn = createCallbackFcn(app, @RoverWidthEditFieldValueChanged, true);
            app.RoverWidthEditField.FontName = 'Cambria Math';
            app.RoverWidthEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.RoverWidthEditField.Position = [55 507 153 22];

            % Create LengthLabel
            app.LengthLabel = uilabel(app.RoverTab);
            app.LengthLabel.FontName = 'Cambria Math';
            app.LengthLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.LengthLabel.Position = [9 478 43 22];
            app.LengthLabel.Text = 'Length:';

            % Create roverLengthEditField
            app.roverLengthEditField = uieditfield(app.RoverTab, 'numeric');
            app.roverLengthEditField.ValueChangedFcn = createCallbackFcn(app, @roverLengthEditFieldValueChanged, true);
            app.roverLengthEditField.FontName = 'Cambria Math';
            app.roverLengthEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.roverLengthEditField.Position = [55 478 153 22];

            % Create PowerEditFieldLabel
            app.PowerEditFieldLabel = uilabel(app.RoverTab);
            app.PowerEditFieldLabel.FontName = 'Cambria Math';
            app.PowerEditFieldLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.PowerEditFieldLabel.Position = [8 449 41 22];
            app.PowerEditFieldLabel.Text = 'Power:';

            % Create PowerEditField
            app.PowerEditField = uieditfield(app.RoverTab, 'numeric');
            app.PowerEditField.Limits = [0 5];
            app.PowerEditField.FontName = 'Cambria Math';
            app.PowerEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.PowerEditField.Position = [55 449 153 22];
            app.PowerEditField.Value = 3;

            % Create TurnPowerEditFieldLabel
            app.TurnPowerEditFieldLabel = uilabel(app.RoverTab);
            app.TurnPowerEditFieldLabel.FontName = 'Cambria Math';
            app.TurnPowerEditFieldLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.TurnPowerEditFieldLabel.Position = [9 418 71 22];
            app.TurnPowerEditFieldLabel.Text = 'Turn Power: ';

            % Create TurnPowerEditField
            app.TurnPowerEditField = uieditfield(app.RoverTab, 'numeric');
            app.TurnPowerEditField.Limits = [0 5];
            app.TurnPowerEditField.FontName = 'Cambria Math';
            app.TurnPowerEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.TurnPowerEditField.Position = [80 418 128 22];
            app.TurnPowerEditField.Value = 2;

            % Create RoverParametersLabel
            app.RoverParametersLabel = uilabel(app.RoverTab);
            app.RoverParametersLabel.HorizontalAlignment = 'center';
            app.RoverParametersLabel.FontName = 'Cambria Math';
            app.RoverParametersLabel.FontSize = 18;
            app.RoverParametersLabel.FontWeight = 'bold';
            app.RoverParametersLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.RoverParametersLabel.Position = [0 532 219 23];
            app.RoverParametersLabel.Text = 'Rover Parameters';

            % Create SpawnPositionSwitchLabel
            app.SpawnPositionSwitchLabel = uilabel(app.RoverTab);
            app.SpawnPositionSwitchLabel.HorizontalAlignment = 'center';
            app.SpawnPositionSwitchLabel.FontName = 'Cambria Math';
            app.SpawnPositionSwitchLabel.FontSize = 14;
            app.SpawnPositionSwitchLabel.FontWeight = 'bold';
            app.SpawnPositionSwitchLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SpawnPositionSwitchLabel.Position = [4 352 214 22];
            app.SpawnPositionSwitchLabel.Text = 'Spawn Position';

            % Create SpawnPositionSwitch
            app.SpawnPositionSwitch = uiswitch(app.RoverTab, 'slider');
            app.SpawnPositionSwitch.Items = {'Randomized', 'Custom'};
            app.SpawnPositionSwitch.ValueChangedFcn = createCallbackFcn(app, @SpawnPositionChanged, true);
            app.SpawnPositionSwitch.FontName = 'Cambria Math';
            app.SpawnPositionSwitch.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SpawnPositionSwitch.Position = [95 331 37 16];
            app.SpawnPositionSwitch.Value = 'Randomized';

            % Create SensorMaxRangeEditFieldLabel
            app.SensorMaxRangeEditFieldLabel = uilabel(app.RoverTab);
            app.SensorMaxRangeEditFieldLabel.FontName = 'Cambria Math';
            app.SensorMaxRangeEditFieldLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SensorMaxRangeEditFieldLabel.Position = [9 388 103 22];
            app.SensorMaxRangeEditFieldLabel.Text = 'Sensor Max Range:';

            % Create SensorMaxRangeEditField
            app.SensorMaxRangeEditField = uieditfield(app.RoverTab, 'numeric');
            app.SensorMaxRangeEditField.Limits = [0 100];
            app.SensorMaxRangeEditField.RoundFractionalValues = 'on';
            app.SensorMaxRangeEditField.FontName = 'Cambria Math';
            app.SensorMaxRangeEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SensorMaxRangeEditField.Position = [115 387 94 22];
            app.SensorMaxRangeEditField.Value = 70;

            % Create SpawnPositionPlot
            app.SpawnPositionPlot = uibutton(app.RoverTab, 'push');
            app.SpawnPositionPlot.ButtonPushedFcn = createCallbackFcn(app, @SpawnPositionPlotButtonPushed, true);
            app.SpawnPositionPlot.BackgroundColor = [0.96078431372549 0.96078431372549 0.96078431372549];
            app.SpawnPositionPlot.FontName = 'Cambria Math';
            app.SpawnPositionPlot.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SpawnPositionPlot.Visible = 'off';
            app.SpawnPositionPlot.Position = [6 294 100 23];
            app.SpawnPositionPlot.Text = 'Plot';

            % Create PlotButton_4
            app.PlotButton_4 = uibutton(app.RoverTab, 'push');
            app.PlotButton_4.ButtonPushedFcn = createCallbackFcn(app, @PlotButton_4Pushed, true);
            app.PlotButton_4.BackgroundColor = [0.96078431372549 0.96078431372549 0.96078431372549];
            app.PlotButton_4.FontName = 'Cambria Math';
            app.PlotButton_4.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.PlotButton_4.Position = [60 178 100 23];
            app.PlotButton_4.Text = 'Plot';

            % Create SpawnPositionSwitchLabel_2
            app.SpawnPositionSwitchLabel_2 = uilabel(app.RoverTab);
            app.SpawnPositionSwitchLabel_2.HorizontalAlignment = 'center';
            app.SpawnPositionSwitchLabel_2.FontName = 'Cambria Math';
            app.SpawnPositionSwitchLabel_2.FontSize = 14;
            app.SpawnPositionSwitchLabel_2.FontWeight = 'bold';
            app.SpawnPositionSwitchLabel_2.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SpawnPositionSwitchLabel_2.Position = [3 216 214 22];
            app.SpawnPositionSwitchLabel_2.Text = 'Objective Spawn Position';

            % Create AngleEditFieldLabel
            app.AngleEditFieldLabel = uilabel(app.RoverTab);
            app.AngleEditFieldLabel.HorizontalAlignment = 'right';
            app.AngleEditFieldLabel.FontName = 'Cambria Math';
            app.AngleEditFieldLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.AngleEditFieldLabel.Visible = 'off';
            app.AngleEditFieldLabel.Position = [40 256 37 22];
            app.AngleEditFieldLabel.Text = 'Angle:';

            % Create AngleEditField
            app.AngleEditField = uieditfield(app.RoverTab, 'text');
            app.AngleEditField.InputType = 'digits';
            app.AngleEditField.ValueChangedFcn = createCallbackFcn(app, @AngleEditFieldValueChanged, true);
            app.AngleEditField.FontName = 'Cambria Math';
            app.AngleEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.AngleEditField.Visible = 'off';
            app.AngleEditField.Position = [92 256 100 22];
            app.AngleEditField.Value = '90';

            % Create CoordinatesEditField
            app.CoordinatesEditField = uieditfield(app.RoverTab, 'text');
            app.CoordinatesEditField.ValueChangedFcn = createCallbackFcn(app, @CoordinatesEditFieldValueChanged, true);
            app.CoordinatesEditField.HorizontalAlignment = 'right';
            app.CoordinatesEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.CoordinatesEditField.Visible = 'off';
            app.CoordinatesEditField.Position = [116 294 100 22];
            app.CoordinatesEditField.Value = '0,0';

            % Create SpawnPositionSwitchLabel_3
            app.SpawnPositionSwitchLabel_3 = uilabel(app.RoverTab);
            app.SpawnPositionSwitchLabel_3.HorizontalAlignment = 'center';
            app.SpawnPositionSwitchLabel_3.FontName = 'Cambria Math';
            app.SpawnPositionSwitchLabel_3.FontSize = 14;
            app.SpawnPositionSwitchLabel_3.FontWeight = 'bold';
            app.SpawnPositionSwitchLabel_3.Position = [4 142 214 22];
            app.SpawnPositionSwitchLabel_3.Text = 'Rover Sensors';

            % Create NumberofSensorsLabel
            app.NumberofSensorsLabel = uilabel(app.RoverTab);
            app.NumberofSensorsLabel.HorizontalAlignment = 'right';
            app.NumberofSensorsLabel.FontName = 'Cambria Math';
            app.NumberofSensorsLabel.Position = [9 113 107 22];
            app.NumberofSensorsLabel.Text = 'Number of Sensors:';

            % Create NumberofSensorsEditField
            app.NumberofSensorsEditField = uieditfield(app.RoverTab, 'text');
            app.NumberofSensorsEditField.InputType = 'digits';
            app.NumberofSensorsEditField.ValueChangedFcn = createCallbackFcn(app, @NumberofSensorsEditFieldValueChanged, true);
            app.NumberofSensorsEditField.FontName = 'Cambria Math';
            app.NumberofSensorsEditField.Placeholder = '10';
            app.NumberofSensorsEditField.Position = [131 113 80 22];

            % Create LiDARFieldofViewEditFieldLabel
            app.LiDARFieldofViewEditFieldLabel = uilabel(app.RoverTab);
            app.LiDARFieldofViewEditFieldLabel.HorizontalAlignment = 'right';
            app.LiDARFieldofViewEditFieldLabel.FontName = 'Cambria Math';
            app.LiDARFieldofViewEditFieldLabel.Position = [8 76 108 22];
            app.LiDARFieldofViewEditFieldLabel.Text = 'LiDAR Field of View:';

            % Create LiDARFieldofViewEditField
            app.LiDARFieldofViewEditField = uieditfield(app.RoverTab, 'text');
            app.LiDARFieldofViewEditField.InputType = 'digits';
            app.LiDARFieldofViewEditField.ValueChangedFcn = createCallbackFcn(app, @LiDARFieldofViewEditFieldValueChanged, true);
            app.LiDARFieldofViewEditField.FontName = 'Cambria Math';
            app.LiDARFieldofViewEditField.Placeholder = '360';
            app.LiDARFieldofViewEditField.Position = [131 76 80 22];

            % Create Switch
            app.Switch = uiswitch(app.RoverTab, 'slider');
            app.Switch.Items = {'Lines', 'Points'};
            app.Switch.ValueChangedFcn = createCallbackFcn(app, @SwitchValueChanged, true);
            app.Switch.FontName = 'Cambria Math';
            app.Switch.Position = [88 44 45 20];
            app.Switch.Value = 'Lines';

            % Create ObstaclesTab
            app.ObstaclesTab = uitab(app.CustomizationTabs);
            app.ObstaclesTab.Title = 'Obstacles';
            app.ObstaclesTab.BackgroundColor = [0.9412 0.9412 0.9412];
            app.ObstaclesTab.ForegroundColor = [0.129411764705882 0.129411764705882 0.129411764705882];

            % Create polygonimage
            app.polygonimage = uiimage(app.ObstaclesTab);
            app.polygonimage.Position = [144 464 71 67];
            app.polygonimage.ImageSource = fullfile(pathToMLAPP, 'Images', 'polynewnew.png');

            % Create circleImage
            app.circleImage = uiimage(app.ObstaclesTab);
            app.circleImage.Position = [136 259 79 72];
            app.circleImage.ImageSource = fullfile(pathToMLAPP, 'Images', 'GreenCircle-removebg-preview.png');

            % Create RectHeightEditField
            app.RectHeightEditField = uieditfield(app.ObstaclesTab, 'numeric');
            app.RectHeightEditField.ValueChangedFcn = createCallbackFcn(app, @RectHeightEditFieldValueChanged, true);
            app.RectHeightEditField.FontName = 'Cambria Math';
            app.RectHeightEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.RectHeightEditField.Position = [81 372 54 22];
            app.RectHeightEditField.Value = 6;

            % Create RectHeightLabel
            app.RectHeightLabel = uilabel(app.ObstaclesTab);
            app.RectHeightLabel.FontName = 'Cambria Math';
            app.RectHeightLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.RectHeightLabel.Position = [13 370 66 22];
            app.RectHeightLabel.Text = 'Side Length:';

            % Create CircleRadiusEditField
            app.CircleRadiusEditField = uieditfield(app.ObstaclesTab, 'numeric');
            app.CircleRadiusEditField.ValueChangedFcn = createCallbackFcn(app, @CircleRadiusEditFieldValueChanged, true);
            app.CircleRadiusEditField.FontName = 'Cambria Math';
            app.CircleRadiusEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.CircleRadiusEditField.Position = [55 275 80 22];
            app.CircleRadiusEditField.Value = 3;

            % Create CircleRadiusLabel
            app.CircleRadiusLabel = uilabel(app.ObstaclesTab);
            app.CircleRadiusLabel.FontName = 'Cambria Math';
            app.CircleRadiusLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.CircleRadiusLabel.Position = [12 275 82 22];
            app.CircleRadiusLabel.Text = 'Radius:';

            % Create SideNumberEditField
            app.SideNumberEditField = uieditfield(app.ObstaclesTab, 'numeric');
            app.SideNumberEditField.FontName = 'Cambria Math';
            app.SideNumberEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SideNumberEditField.Position = [79 473 56 22];
            app.SideNumberEditField.Value = 3;

            % Create PlotButton
            app.PlotButton = uibutton(app.ObstaclesTab, 'push');
            app.PlotButton.ButtonPushedFcn = createCallbackFcn(app, @PlotButtonPushed, true);
            app.PlotButton.BackgroundColor = [0.902 0.902 0.902];
            app.PlotButton.FontName = 'Cambria Math';
            app.PlotButton.FontColor = [0.149 0.149 0.149];
            app.PlotButton.Position = [153 446 55 22];
            app.PlotButton.Text = 'Plot ';

            % Create PlotButton_2
            app.PlotButton_2 = uibutton(app.ObstaclesTab, 'push');
            app.PlotButton_2.ButtonPushedFcn = createCallbackFcn(app, @PlotButton_2Pushed, true);
            app.PlotButton_2.BackgroundColor = [0.902 0.902 0.902];
            app.PlotButton_2.FontName = 'Cambria Math';
            app.PlotButton_2.FontColor = [0.149 0.149 0.149];
            app.PlotButton_2.Position = [159 339 44 22];
            app.PlotButton_2.Text = 'Plot';

            % Create PlotButton_3
            app.PlotButton_3 = uibutton(app.ObstaclesTab, 'push');
            app.PlotButton_3.ButtonPushedFcn = createCallbackFcn(app, @PlotButton_3Pushed, true);
            app.PlotButton_3.BackgroundColor = [0.902 0.902 0.902];
            app.PlotButton_3.FontName = 'Cambria Math';
            app.PlotButton_3.FontColor = [0.149 0.149 0.149];
            app.PlotButton_3.Position = [158 247 45 22];
            app.PlotButton_3.Text = 'Plot';

            % Create PolyRadiusEditField
            app.PolyRadiusEditField = uieditfield(app.ObstaclesTab, 'numeric');
            app.PolyRadiusEditField.ValueChangedFcn = createCallbackFcn(app, @PolyRadiusEditFieldValueChanged, true);
            app.PolyRadiusEditField.FontName = 'Cambria Math';
            app.PolyRadiusEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.PolyRadiusEditField.Position = [87 442 48 22];
            app.PolyRadiusEditField.Value = 6;

            % Create polyradiuslabel
            app.polyradiuslabel = uilabel(app.ObstaclesTab);
            app.polyradiuslabel.FontName = 'Cambria Math';
            app.polyradiuslabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.polyradiuslabel.Position = [11 442 75 22];
            app.polyradiuslabel.Text = 'Circumradius:';

            % Create SideNumberLabel
            app.SideNumberLabel = uilabel(app.ObstaclesTab);
            app.SideNumberLabel.FontName = 'Cambria Math';
            app.SideNumberLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SideNumberLabel.Position = [13 473 61 22];
            app.SideNumberLabel.Text = 'Side Count:';

            % Create CircularObstacleLabel
            app.CircularObstacleLabel = uilabel(app.ObstaclesTab);
            app.CircularObstacleLabel.FontName = 'Cambria Math';
            app.CircularObstacleLabel.FontSize = 14;
            app.CircularObstacleLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.CircularObstacleLabel.Position = [11 306 110 22];
            app.CircularObstacleLabel.Text = 'Circular Obstacle';

            % Create SquareObstacleLabel
            app.SquareObstacleLabel = uilabel(app.ObstaclesTab);
            app.SquareObstacleLabel.FontName = 'Cambria Math';
            app.SquareObstacleLabel.FontSize = 14;
            app.SquareObstacleLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SquareObstacleLabel.Position = [13 401 105 22];
            app.SquareObstacleLabel.Text = 'Square Obstacle';

            % Create PolygonalObstacleLabel
            app.PolygonalObstacleLabel = uilabel(app.ObstaclesTab);
            app.PolygonalObstacleLabel.FontName = 'Cambria Math';
            app.PolygonalObstacleLabel.FontSize = 14;
            app.PolygonalObstacleLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.PolygonalObstacleLabel.Position = [12 502 123 22];
            app.PolygonalObstacleLabel.Text = 'Polygonal Obstacle';

            % Create polygonimage_2
            app.polygonimage_2 = uiimage(app.ObstaclesTab);
            app.polygonimage_2.Position = [153 369 57 50];
            app.polygonimage_2.ImageSource = fullfile(pathToMLAPP, 'Images', 'premier-paints-t60-5-pale-sunflower-paint-color-match-2.jpg');

            % Create ObstacleLibraryLabel
            app.ObstacleLibraryLabel = uilabel(app.ObstaclesTab);
            app.ObstacleLibraryLabel.HorizontalAlignment = 'center';
            app.ObstacleLibraryLabel.FontName = 'Cambria Math';
            app.ObstacleLibraryLabel.FontSize = 18;
            app.ObstacleLibraryLabel.FontWeight = 'bold';
            app.ObstacleLibraryLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.ObstacleLibraryLabel.Position = [0 531 219 23];
            app.ObstacleLibraryLabel.Text = 'Obstacle Library';

            % Create RemoveModeSwitchLabel
            app.RemoveModeSwitchLabel = uilabel(app.ObstaclesTab);
            app.RemoveModeSwitchLabel.HorizontalAlignment = 'center';
            app.RemoveModeSwitchLabel.Position = [71 143 83 22];
            app.RemoveModeSwitchLabel.Text = 'Remove Mode';

            % Create RemoveModeSwitch
            app.RemoveModeSwitch = uiswitch(app.ObstaclesTab, 'slider');
            app.RemoveModeSwitch.ValueChangedFcn = createCallbackFcn(app, @removemodeswitchstatus, true);
            app.RemoveModeSwitch.Position = [89 180 45 20];

            % Create CenterPanel
            app.CenterPanel = uipanel(app.GridLayout);
            app.CenterPanel.ForegroundColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.CenterPanel.BackgroundColor = [0.9804 0.9804 0.9804];
            app.CenterPanel.Layout.Row = 1;
            app.CenterPanel.Layout.Column = 2;

            % Create UIAxes
            app.UIAxes = uiaxes(app.CenterPanel);
            app.UIAxes.Toolbar.Visible = 'off';
            app.UIAxes.FontName = 'Cambria Math';
            app.UIAxes.GridLineWidth = 0.05;
            app.UIAxes.MinorGridLineWidth = 0.05;
            app.UIAxes.GridLineStyle = 'none';
            app.UIAxes.BoxStyle = 'full';
            app.UIAxes.LineWidth = 0.1;
            app.UIAxes.Color = [0.9804 0.9804 0.9804];
            app.UIAxes.Box = 'on';
            app.UIAxes.Position = [7 12 513 611];

            % Create RightPanel
            app.RightPanel = uipanel(app.GridLayout);
            app.RightPanel.ForegroundColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.RightPanel.TitlePosition = 'centertop';
            app.RightPanel.Title = 'Simulation';
            app.RightPanel.BackgroundColor = [0.9412 0.9412 0.9412];
            app.RightPanel.Layout.Row = 1;
            app.RightPanel.Layout.Column = 3;
            app.RightPanel.FontName = 'Cambria';
            app.RightPanel.FontWeight = 'bold';
            app.RightPanel.FontSize = 18;

            % Create StartButton
            app.StartButton = uibutton(app.RightPanel, 'push');
            app.StartButton.ButtonPushedFcn = createCallbackFcn(app, @StartButtonPushed, true);
            app.StartButton.BackgroundColor = [0.6941 0.9882 0.7569];
            app.StartButton.FontName = 'Cambria Math';
            app.StartButton.FontSize = 14;
            app.StartButton.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.StartButton.Position = [30 565 86 25];
            app.StartButton.Text = 'Start';

            % Create StopButton
            app.StopButton = uibutton(app.RightPanel, 'push');
            app.StopButton.ButtonPushedFcn = createCallbackFcn(app, @StopButtonPushed, true);
            app.StopButton.BackgroundColor = [1 0.3216 0.3216];
            app.StopButton.FontName = 'Cambria Math';
            app.StopButton.FontSize = 14;
            app.StopButton.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.StopButton.Position = [147 566 100 25];
            app.StopButton.Text = 'Stop';

            % Create ConfigPanel
            app.ConfigPanel = uipanel(app.RightPanel);
            app.ConfigPanel.ForegroundColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.ConfigPanel.BorderType = 'none';
            app.ConfigPanel.BackgroundColor = [0.96078431372549 0.96078431372549 0.96078431372549];
            app.ConfigPanel.Position = [19 12 243 109];

            % Create SaveQMatrixButton
            app.SaveQMatrixButton = uibutton(app.ConfigPanel, 'push');
            app.SaveQMatrixButton.ButtonPushedFcn = createCallbackFcn(app, @downloadQMatrix, true);
            app.SaveQMatrixButton.BackgroundColor = [0.902 0.902 0.902];
            app.SaveQMatrixButton.FontName = 'Cambria Math';
            app.SaveQMatrixButton.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SaveQMatrixButton.Position = [136 44 90 22];
            app.SaveQMatrixButton.Text = 'Save Q-Matrix';

            % Create LoadQMatrixButton
            app.LoadQMatrixButton = uibutton(app.ConfigPanel, 'push');
            app.LoadQMatrixButton.ButtonPushedFcn = createCallbackFcn(app, @uploadQMatrix, true);
            app.LoadQMatrixButton.BackgroundColor = [0.902 0.902 0.902];
            app.LoadQMatrixButton.FontName = 'Cambria Math';
            app.LoadQMatrixButton.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.LoadQMatrixButton.Position = [30 44 93 22];
            app.LoadQMatrixButton.Text = 'Load Q-Matrix';

            % Create SaveTrackButton
            app.SaveTrackButton = uibutton(app.ConfigPanel, 'push');
            app.SaveTrackButton.ButtonPushedFcn = createCallbackFcn(app, @downloadTrackConfig, true);
            app.SaveTrackButton.BackgroundColor = [0.902 0.902 0.902];
            app.SaveTrackButton.FontName = 'Cambria Math';
            app.SaveTrackButton.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SaveTrackButton.Position = [136 77 90 22];
            app.SaveTrackButton.Text = 'Save Track';

            % Create LoadTrackButton
            app.LoadTrackButton = uibutton(app.ConfigPanel, 'push');
            app.LoadTrackButton.ButtonPushedFcn = createCallbackFcn(app, @uploadTrackConfig, true);
            app.LoadTrackButton.BackgroundColor = [0.902 0.902 0.902];
            app.LoadTrackButton.FontName = 'Cambria Math';
            app.LoadTrackButton.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.LoadTrackButton.Position = [30 77 93 22];
            app.LoadTrackButton.Text = 'Load Track';

            % Create ResetConfigurationButton
            app.ResetConfigurationButton = uibutton(app.ConfigPanel, 'push');
            app.ResetConfigurationButton.ButtonPushedFcn = createCallbackFcn(app, @reset, true);
            app.ResetConfigurationButton.BackgroundColor = [0.902 0.902 0.902];
            app.ResetConfigurationButton.FontName = 'Cambria Math';
            app.ResetConfigurationButton.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.ResetConfigurationButton.Position = [30 12 197 22];
            app.ResetConfigurationButton.Text = 'Reset Configuration';

            % Create Panel_2
            app.Panel_2 = uipanel(app.RightPanel);
            app.Panel_2.ForegroundColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.Panel_2.BorderType = 'none';
            app.Panel_2.BackgroundColor = [0.96078431372549 0.96078431372549 0.96078431372549];
            app.Panel_2.Position = [7 130 266 423];

            % Create RewardsGraph
            app.RewardsGraph = uiaxes(app.Panel_2);
            xlabel(app.RewardsGraph, 'Episode')
            ylabel(app.RewardsGraph, 'Average Action Reward')
            zlabel(app.RewardsGraph, 'Z')
            subtitle(app.RewardsGraph, ' ')
            app.RewardsGraph.FontName = 'Cambria Math';
            app.RewardsGraph.Position = [3 151 129 137];

            % Create LossGraph
            app.LossGraph = uiaxes(app.Panel_2);
            xlabel(app.LossGraph, 'Episode')
            ylabel(app.LossGraph, 'Learning Curve Loss')
            zlabel(app.LossGraph, 'Z')
            subtitle(app.LossGraph, ' ')
            app.LossGraph.FontName = 'Cambria Math';
            app.LossGraph.Position = [139 151 129 137];

            % Create ConvergenceGraph
            app.ConvergenceGraph = uiaxes(app.Panel_2);
            xlabel(app.ConvergenceGraph, 'Episode')
            ylabel(app.ConvergenceGraph, 'Average Q Change')
            zlabel(app.ConvergenceGraph, 'Z')
            subtitle(app.ConvergenceGraph, ' ')
            app.ConvergenceGraph.FontName = 'Cambria Math';
            app.ConvergenceGraph.Position = [4 3 133 140];

            % Create EpsilonGreedyGraph
            app.EpsilonGreedyGraph = uiaxes(app.Panel_2);
            xlabel(app.EpsilonGreedyGraph, 'Episode')
            ylabel(app.EpsilonGreedyGraph, 'ε-Greedy Exploration')
            zlabel(app.EpsilonGreedyGraph, 'Z')
            subtitle(app.EpsilonGreedyGraph, ' ')
            app.EpsilonGreedyGraph.FontName = 'Cambria Math';
            app.EpsilonGreedyGraph.Position = [132 6 129 137];

            % Create LapCountLabel
            app.LapCountLabel = uilabel(app.Panel_2);
            app.LapCountLabel.FontName = 'Cambria Math';
            app.LapCountLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.LapCountLabel.Position = [41 369 59 22];
            app.LapCountLabel.Text = 'Lap Count:';

            % Create LapCountEditField
            app.LapCountEditField = uieditfield(app.Panel_2, 'numeric');
            app.LapCountEditField.RoundFractionalValues = 'on';
            app.LapCountEditField.Editable = 'off';
            app.LapCountEditField.FontName = 'Cambria Math';
            app.LapCountEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.LapCountEditField.Position = [102 371 122 22];

            % Create SimulationTimeLabel
            app.SimulationTimeLabel = uilabel(app.Panel_2);
            app.SimulationTimeLabel.FontName = 'Cambria Math';
            app.SimulationTimeLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SimulationTimeLabel.Position = [41 338 90 22];
            app.SimulationTimeLabel.Text = 'Simulation Time:';

            % Create FPSLabel
            app.FPSLabel = uilabel(app.Panel_2);
            app.FPSLabel.FontName = 'Cambria Math';
            app.FPSLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.FPSLabel.Position = [41 304 27 22];
            app.FPSLabel.Text = 'FPS:';

            % Create SimulationTimeEditField
            app.SimulationTimeEditField = uieditfield(app.Panel_2, 'numeric');
            app.SimulationTimeEditField.RoundFractionalValues = 'on';
            app.SimulationTimeEditField.Editable = 'off';
            app.SimulationTimeEditField.FontName = 'Cambria Math';
            app.SimulationTimeEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.SimulationTimeEditField.Position = [134 339 90 22];

            % Create FramesPerSecondEditField
            app.FramesPerSecondEditField = uieditfield(app.Panel_2, 'numeric');
            app.FramesPerSecondEditField.RoundFractionalValues = 'on';
            app.FramesPerSecondEditField.Editable = 'off';
            app.FramesPerSecondEditField.FontName = 'Cambria Math';
            app.FramesPerSecondEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.FramesPerSecondEditField.Position = [75 306 149 22];

            % Create EpisodeCountLabel
            app.EpisodeCountLabel = uilabel(app.Panel_2);
            app.EpisodeCountLabel.FontName = 'Cambria Math';
            app.EpisodeCountLabel.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.EpisodeCountLabel.Position = [41 402 80 22];
            app.EpisodeCountLabel.Text = 'Episode Count:';

            % Create EpisodeCountEditField
            app.EpisodeCountEditField = uieditfield(app.Panel_2, 'numeric');
            app.EpisodeCountEditField.RoundFractionalValues = 'on';
            app.EpisodeCountEditField.Editable = 'off';
            app.EpisodeCountEditField.FontName = 'Cambria Math';
            app.EpisodeCountEditField.FontColor = [0.129411764705882 0.129411764705882 0.129411764705882];
            app.EpisodeCountEditField.Position = [127 402 97 22];

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = Application(varargin)

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            % Execute the startup function
            runStartupFcn(app, @(app)startupFcn(app, varargin{:}))

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end